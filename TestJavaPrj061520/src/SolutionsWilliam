06/26/20
Java Solution:
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
public class Solution {
    // Complete the minimumBribes function below.
    static void minimumBribes(int[] q) {
        int minBribes = 0;
        int temp = 0;
        boolean isChaotic = false;
        for(int j = 0; j < 2; j++){
            for(int i = q.length-1; i > 0; i--){
                if(q[i-1] > q[i]){
                    temp = q[i-1];
                    q[i-1] = q[i];
                    q[i] = temp;
                    minBribes++;
                }
            }
        }
        for(int i = 0; i < q.length; i++){
            if(q[i] != i+1){
                isChaotic = true;
                break;
            }
        }
        if(isChaotic){
            System.out.println("Too chaotic");
        }else{
            System.out.println(minBribes);
        }
    }
    private static final Scanner scanner = new Scanner(System.in);
    public static void main(String[] args) {
        int t = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
        for (int tItr = 0; tItr < t; tItr++) {
            int n = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
            int[] q = new int[n];
            String[] qItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
            for (int i = 0; i < n; i++) {
                int qItem = Integer.parseInt(qItems[i]);
                q[i] = qItem;
            }
            minimumBribes(q);
        }
        scanner.close();
    }
}
------------------------
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
public class Solution {
    // Complete the minimumSwaps function below.
    static int minimumSwaps(int[] arr) {
        int minSwaps = 0;
        int temp = 0;
        int minIndex = 0;
        for(int i = 0; i < arr.length-1; i++){
            minIndex = i;
            for(int j = i+1; j < arr.length; j++){
                if(arr[minIndex] > arr[j]){
                    minIndex = j;
                }
            }
            if(arr[i] > arr[minIndex]){
                temp = arr[i];
                arr[i] = arr[minIndex];
                arr[minIndex] = temp;
                minSwaps++;
            }
        }
        return minSwaps;
    }
    private static final Scanner scanner = new Scanner(System.in);
    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));
        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
        int[] arr = new int[n];
        String[] arrItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
        for (int i = 0; i < n; i++) {
            int arrItem = Integer.parseInt(arrItems[i]);
            arr[i] = arrItem;
        }
        int res = minimumSwaps(arr);
        bufferedWriter.write(String.valueOf(res));
        bufferedWriter.newLine();
        bufferedWriter.close();
        scanner.close();
    }
}

---------------------------
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
public class Solution {
    // Complete the checkMagazine function below.
    static void checkMagazine(String[] magazine, String[] note) {
        HashMap<String, Integer> map = new HashMap<>();
        int count = 0;
        boolean hasAllWords = true;
        for(String word : magazine){
            if(map.containsKey(word)){
                count = map.get(word);
                count++;
                map.put(word, count);
            }else{
                map.put(word, 1);
            }
        }
        for(String word : note){
            if(!map.containsKey(word)){
                hasAllWords = false;
                break;
            }else{
                count = map.get(word);
                count--;
                if(count == 0){
                    map.remove(word);
                }else{
                    map.put(word, count);
                }
            }
        }
        if(hasAllWords){
            System.out.println("Yes");
        }else{
            System.out.println("No");
        }
    }
    private static final Scanner scanner = new Scanner(System.in);
    public static void main(String[] args) {
        String[] mn = scanner.nextLine().split(" ");
        int m = Integer.parseInt(mn[0]);
        int n = Integer.parseInt(mn[1]);
        String[] magazine = new String[m];
        String[] magazineItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
        for (int i = 0; i < m; i++) {
            String magazineItem = magazineItems[i];
            magazine[i] = magazineItem;
        }
        String[] note = new String[n];
        String[] noteItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
        for (int i = 0; i < n; i++) {
            String noteItem = noteItems[i];
            note[i] = noteItem;
        }
        checkMagazine(magazine, note);
        scanner.close();
    }
}

------------------------------
SQL Solution:
Select h.hacker_id, h.name, Count(c.challenge_id) as total
From Hackers h Join Challenges c On h.hacker_id = c.hacker_id
Group By h.hacker_id, h.name
Having total = (Select Max(t1.c_count)
                From (Select Count(hacker_id) as c_count
                      From Challenges
                      Group By hacker_id
                      Order By hacker_id) t1)
        Or total In 
        (Select t2.cnt
         From (Select count(*) as cnt 
               From challenges
               Group By hacker_id) t2
         Group By t2.cnt
         Having Count(t2.cnt) = 1)
Order By total desc, h.hacker_id;

=========================================
6/25/2020 5:58 PM
Java Solutions:
Time - 45 mins.
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {
    // Complete the hourglassSum function below.
    static int hourglassSum(int[][] arr) {
        int max = IntegerMIN_VALUE;
        for(int i = 0; i < arr.length-2; i++){
            int sum = 0;
            for(int j = 0; j < arr[0].length-2; j++){
                sum = arr[i][j] + arr[i][j+1] + arr[i][j+2]
                    + arr[i+1][j+1] + arr[i+2][j] + arr[i+2][j+1] 
                    + arr[i+2][j+2];
                if(sum > max){
                    max = sum;
                }
            }
        }
        return max;
    }
    private static final Scanner scanner = new Scanner(System.in);
    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));
        int[][] arr = new int[6][6];
        for (int i = 0; i < 6; i++) {
            String[] arrRowItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            for (int j = 0; j < 6; j++) {
                int arrItem = Integer.parseInt(arrRowItems[j]);
                arr[i][j] = arrItem;
            }
        }
        int result = hourglassSum(arr);
        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();
        bufferedWriter.close();
        scanner.close();
    }
}

--------------------
Time - 15 mins.
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {
    // Complete the rotLeft function below.
    static int[] rotLeft(int[] a, int d) {
        int temp = 0;
        int length = a.length-1;
        for(int i = 0; i < d; i++){
            temp = a[0];
            for(int j = 1; j < a.length; j++){
                a[j-1] = a[j];
            }
            a[length] = temp;
        }
        return a;
    }
    private static final Scanner scanner = new Scanner(System.in);
    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));
        String[] nd = scanner.nextLine().split(" ");
        int n = Integer.parseInt(nd[0]);
        int d = Integer.parseInt(nd[1]);
        int[] a = new int[n];
        String[] aItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
        for (int i = 0; i < n; i++) {
            int aItem = Integer.parseInt(aItems[i]);
            a[i] = aItem;
        }
        int[] result = rotLeft(a, d);
        for (int i = 0; i < result.length; i++) {
            bufferedWriter.write(String.valueOf(result[i]));
            if (i != result.length - 1) {
                bufferedWriter.write(" ");
            }
        }
        bufferedWriter.newLine();
        bufferedWriter.close();
        scanner.close();
    }
}

---------------------------------------
SQL Solution:
Select HYPERLINK "http://w.id"w.id, wp.age, w.coins_needed, w.power
From Wands w, Wands_Property wp
Where w.code = wp.code
And wp.is_evil = 0
And w.coins_needed = (Select Min(Wands.coins_needed) 
                      From Wands Join Wands_Property On Wands.code = Wands_Property.code 
                      Where Wands_Property.age = wp.age 
                      And Wands.power = w.power)
Order By w.power desc, wp.age desc;
=================================================
6/25/2020 10:33 AM
Java Solutions:
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {
    // Complete the jumpingOnClouds function below.
    static int jumpingOnClouds(int[] c) {
        int numOfJumps = 0;
        int i = 0;
        int length = c.length;
        while(i < length-1){
            if(i+2 < length && c[i+2] == 0){
                i = i + 2;
                numOfJumps++;
            }else if(i+1 < length && c[i+1] == 0){
                i = i + 1;
                numOfJumps++;
            }
        }
        return numOfJumps;
    }
    private static final Scanner scanner = new Scanner(System.in);
    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));
        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
        int[] c = new int[n];
        String[] cItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
        for (int i = 0; i < n; i++) {
            int cItem = Integer.parseInt(cItems[i]);
            c[i] = cItem;
        }
        int result = jumpingOnClouds(c);
        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();
        bufferedWriter.close();
        scanner.close();
    }
}

-------------------------
import java.io.*;
import java.math.*;
import java.security.*;
import javatext.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {
    // Complete the repeatedString function below.
    static long repeatedString(String s, long n) {
        if(s.length() == 1 && s.charAt(0) == 'a'){
            return n;
        }
        char a = 'a';
        long count = 0;
        int index = 0;
        for(long i = 0; i < s.length(); i++){
            if(s.charAt(index) == a){
                count++;
            }
            index++;
        }
        count = count * (n/s.length());
        long remainder = n % s.length();
        for(int i = 0; i < remainder; i++){
            if(s.charAt(i) == a){
                count++;
            }
        }
        return count;
    }
    private static final Scanner scanner = new Scanner(System.in);
    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));
        String s = scanner.nextLine();
        long n = scanner.nextLong();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
        long result = repeatedString(s, n);
        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();
        bufferedWriter.close();
        scanner.close();
    }
}

---------------------------------------------
SQL Solution:
Select h.hacker_id, HYPERLINK "http://h.name"h.name
From submissions s
    Join challenges c
    On s.challenge_id = c.challenge_id
    Join difficulty d
    On c.difficulty_level = d.difficulty_level
    Join hackers h
    On s.hacker_id = h.hacker_id
Where s.score = d.score
And c.difficulty_level = d.difficulty_level
Group By h.hacker_id, HYPERLINK "http://h.name"h.name
Having Count(s.hacker_id) > 1
Order By Count(h.hacker_id) desc, h.hacker_id asc;
